---
###############################################################################
#
# Ansible remediation role for profile xccdf_org.ssgproject.content_profile_common_customized_starter
# Profile Title:  Common Profile for General-Purpose Systems [CUSTOMIZED]
# Profile Description:
# This profile contains items common to general-purpose desktop and server installations.
#
# Benchmark ID:  xccdf_org.ssgproject.content_benchmark_RHEL-7
# Benchmark Version:  0.1.36
#
# XCCDF Version:  1.2
#
# This file was generated by OpenSCAP 1.2.16 using:
# 	$ oscap xccdf generate fix --profile xccdf_org.ssgproject.content_profile_common_customized_starter --template urn:xccdf:fix:script:ansible xccdf-file.xml 
#
# This script is generated from an OpenSCAP profile without preliminary evaluation.
# It attempts to fix every selected rule, even if the system is already compliant.
#
# How to apply this remediation role:
# $ ansible-playbook -i "192.168.1.155," playbook.yml
# $ ansible-playbook -i inventory.ini playbook.yml
#
###############################################################################

 - hosts: web
   gather_facts: no
   tasks:
    - name: Set permission as 0000 on /etc/shadow
      file:
        path="{{item}}"
        mode=0000
      with_items:
        - /etc/shadow
      register: result
    - debug:
        msg: Set permission /etc/shadow as 0000 {{result.msg}}.    


    - name: Set permission as 0644 on /etc/group
      file:
        path: "{{ item }}"
        mode: 0644
      with_items:
        - /etc/group
      register: result
    - debug:
        msg: Set permission /etc/group as 0644 {{result.msg}}.
   
 
    - name: Set ownership & permission to root on /etc/gshadow
      file:
        path: "{{ item }}"
        group: root
        mode: 0000
      with_items:
        - /etc/gshadow

    
    - name: Set ownership & permission to root on /etc/passwd
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - /etc/passwd




##################################################
#  Uncomment, if needed
###################################################
#    - name: "Direct root Logins Not Allowed"
#      shell: echo > /etc/securetty


###################################################
#  Uncomment, if needed 
###################################################
#    - name: "Restrict Serial Port Root Logins"
#      lineinfile:
#        dest: /etc/securetty
#        regexp: 'ttyS[0-9]'
#        state: absent
   
 
    - name: "Prevent Log In to Accounts With Empty Password - system-auth"
      replace:
        dest: /etc/pam.d/system-auth
        follow: yes
        regexp: 'nullok'

    
    - name: "Prevent Log In to Accounts With Empty Password - password-auth"
      replace:
        dest: /etc/pam.d/password-auth
        follow: yes
        regexp: 'nullok'
    
    
    - name: Enable service firewalld
      service:
        name="{{ item }}"
        enabled="yes"
        state="started"
      with_items:
        - firewalld


    - name: Set SELinux permissive
      selinux:
        policy: targeted
        state: permissive


    - name: disable SELinux
      lineinfile:
        dest: /etc/selinux/config
        regexp: ^SELINUX=
        line: SELINUX=disabled


    - name: Disable SSH Support for .rhosts Files
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: ^IgnoreRhosts
        line: IgnoreRhosts yes
        validate: sshd -t -f %s

 
    - name: Disable SSH Support for Rhosts RSA Authentication
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: ^RhostsRSAAuthentication
        line: RhostsRSAAuthentication no
        validate: sshd -t -f %s

 
#    - name: Disable SSH Root Login
#      lineinfile:
#        create: yes
#        dest: "/etc/ssh/sshd_config"
#        regexp: "^PermitRootLogin"
#        line: "PermitRootLogin no"
#        insertafter: '(?i)^#?authentication'
#        validate: sshd -t -f %s
#      #notify: restart sshd


    - name: Disable service tftp
      service:
        name= "{{ item }}"
        enabled="no"
        state="stopped"
      with_items:
        - tftp

    - name: Ensure tftp-server is removed
      package:
        name= "{{ item }}"
        state=absent
      with_items:
        - tftp-server
        - tftp

    - name: Set Deny For Failed Password Attempts
      pamd:
        name: system-auth
        type: auth
        control: sufficient
        module_path: pam_unix.so
        state: before
        new_type: auth
        new_control: required
        new_module_path: pam_tally2.so
        module_arguments: 'onerr=fail deny=3 unlock_time=300'

    - name: "Set TMOUT in profile"
      lineinfile:
        path: /etc/profile
        line: 'TMOUT=300'
